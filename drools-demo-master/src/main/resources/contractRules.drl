import com.master.examples.drools.model.Contract;
import com.master.examples.drools.model.Product;
import com.master.examples.drools.model.Insurance
import com.master.examples.drools.model.NotificationPayment
import com.master.examples.drools.model.Discount
import com.master.examples.drools.model.InsuranceProduct
import java.util.Objects
import java.util.Collections
import java.util.HashSet
import java.util.Arrays

/**
Rule 1
**/
rule "Check contract for any insurance"
    when
        fdObject : Contract(insuranceSet.size() > 0)
    then
        fdObject.setHasInsurance(true);
end;

/**
Rule 2
**/
rule "Check insurance if active insurance"
    when
        insuranceObj : Insurance()
        eval(checkForActiveInsurance(insuranceObj) == true)
    then
        insuranceObj.setActivePayment(true);
end;

/**
Rule 3
**/
rule "Check for discount on contract"
    when
        contractObj : Contract()
        eval(checkForDiscount(contractObj) == true)
    then
        createDiscount(contractObj);

end;

/**
Rule 4
**/
rule "Check contract for active insurance"
    when
        contractObject : Contract(isActive() == true)
    then
        checkForDueDateOnInsurance(contractObject);
end;

/**
Rule 5
**/
rule "Calculate the total sum on Insurance Object"
    when
        isuranceObj : Insurance()
    then
        updateInsuranceTotalSum(isuranceObj);
end;


/**
Rule 6
**/
rule "Add product minimum starting value for insurance type - TYPE.VEHICLE"
    when
        productObj : Product(productType == Product.ProductType.VEHICLE)
    then
        productObj.setProductSum(15.0);
end;

/**
Rule 7
**/
rule "Add product minimum starting value for insurance type - TYPE.HOUSE"
    when
        productObj : Product(productType == Product.ProductType.HOUSE)
    then
        productObj.setProductSum(25.0);
end;

/**
Rule 8
**/
rule "Add product minimum starting value for insurance type - TYPE.LIFE"
    when
        productObj : Product(productType == Product.ProductType.LIFE)
    then
        productObj.setProductSum(45.0);
end;

/**
Rule 9
**/
rule "Calculate sum on InsuranceProduct level"
    when
        insuranceObj: Insurance()
    then
        calculateSumOnInsuranceProduct(insuranceObj);
end;


function void checkForDueDateOnInsurance(Contract contract){
contract
        .getInsuranceSet()
        .forEach(insurance -> {
        if(!insurance.isActivePayment()){
        NotificationPayment payment = new NotificationPayment();
        payment.setInsurance(insurance);
        payment.setDueDate(contract.getContractEndDate());
        System.out.println("New insurance notification!" + payment.toString());

        }else{
        System.out.println("No active insurance on the contract!");
        }
        });
}
function boolean checkForActiveInsurance(Insurance insurance){
return insurance.getInsuranceProducts().stream().anyMatch(Objects::nonNull);
}

function boolean checkForDiscount(Contract contract){
return contract.getInsuranceSet().stream().anyMatch(insurance ->
insurance.getInsuranceType() == Insurance.InsuranceType.LIFE && insurance.getInsuranceType() == Insurance.InsuranceType.VEHICLE);
}

function void createDiscount(Contract contract){
contract.getInsuranceSet().forEach(insurance -> {
Discount discount = new Discount();
discount.setInsuranceSet(new HashSet<>(Collections.singletonList(insurance)));
discount.setPercentage(insurance.getSumInsured()*0.1);
insurance.setDiscountSet(new HashSet<>(Collections.singletonList(discount)));
});
}

function void updateInsuranceTotalSum(Insurance insurance){
Double total = 0.0;
for(InsuranceProduct insuranceProduct: insurance.getInsuranceProducts()) {
    total +=  insuranceProduct.getSumInsured();


    //System.out.println("Hello from updateInsuranceTotalSum Method!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
}
if(total != 0){
insurance.setSumInsured(total);
}
}

function void calculateSumOnInsuranceProduct(Insurance insurance){
Double insuranceProductLevelSum = 0.0;
for(InsuranceProduct insuranceProduct : insurance.getInsuranceProducts()){
insuranceProductLevelSum = insuranceProduct.getProduct().getProductSum();
System.out.println("In method calculateSumOnInsuranceProduct ------------------------> OK");
switch (insurance.getInsuranceType()){
case LIFE:
System.out.println("On switch branch -----------> OK");
insuranceProductLevelSum += 20.0;
break;
case VEHICLE:
insuranceProductLevelSum += 25.0;
break;
case PROPERTY:
insuranceProductLevelSum += 15.0;
break;
}
insuranceProduct.setSumInsured(insuranceProductLevelSum);
}
}

